/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hulist.gui;

import com.hulist.util.LocaleChangeListener;
import com.hulist.util.UserPreferences;
import java.awt.Component;
import java.awt.Image;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;

/**
 *
 * @author Aleksander
 */
public class PreferencesJFrame extends javax.swing.JFrame implements LocaleChangeListener {

    /**
     * Creates new form PreferencesJFrame
     */
    public PreferencesJFrame() {
        // auto-init netbeansa
        initComponents();

        // wartości domyślne sliderów itd.
        initCompsDefaultVals();

        // wartości zapamiętane z preferencji
        initCompsFromPrefs();

        // ostatni init
        initCompsLast();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPanePreferences = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        panelCorrWindow = new javax.swing.JPanel();
        labelCorrWindow = new javax.swing.JLabel();
        labelCorrWindowVal = new javax.swing.JLabel();
        sliderCorrWindow = new javax.swing.JSlider();
        checkBoxRunCorr = new javax.swing.JCheckBox();
        checkBoxSignificance = new javax.swing.JCheckBox();
        labelSignificance = new javax.swing.JLabel();
        textFieldSignificance = new javax.swing.JTextField();
        labelTick = new javax.swing.JLabel();
        checkBoxTwoSidedTest = new javax.swing.JCheckBox();
        jSeparator2 = new javax.swing.JSeparator();
        checkBoxBootstrap = new javax.swing.JCheckBox();
        labelBootstrap = new javax.swing.JLabel();
        textFieldBootstrap = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        checkBoxLogging = new javax.swing.JCheckBox();
        labelLoggingCheckboxHelper = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        labelCorrWindow.setText("rozmiar okna korelacji:");

        labelCorrWindowVal.setText("...");

        sliderCorrWindow.setMaximum(24);
        sliderCorrWindow.setMinimum(2);
        sliderCorrWindow.setMinorTickSpacing(1);
        sliderCorrWindow.setPaintTicks(true);
        sliderCorrWindow.setSnapToTicks(true);
        sliderCorrWindow.setValue(15);
        sliderCorrWindow.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderCorrWindowStateChanged(evt);
            }
        });

        javax.swing.GroupLayout panelCorrWindowLayout = new javax.swing.GroupLayout(panelCorrWindow);
        panelCorrWindow.setLayout(panelCorrWindowLayout);
        panelCorrWindowLayout.setHorizontalGroup(
            panelCorrWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sliderCorrWindow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelCorrWindowLayout.createSequentialGroup()
                .addComponent(labelCorrWindow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelCorrWindowVal))
        );
        panelCorrWindowLayout.setVerticalGroup(
            panelCorrWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCorrWindowLayout.createSequentialGroup()
                .addGroup(panelCorrWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCorrWindow)
                    .addComponent(labelCorrWindowVal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sliderCorrWindow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        checkBoxRunCorr.setText("korelacja krocząca");
        checkBoxRunCorr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxRunCorrActionPerformed(evt);
            }
        });

        checkBoxSignificance.setText("obliczanie istotności statystycznej");
        checkBoxSignificance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxSignificanceActionPerformed(evt);
            }
        });

        labelSignificance.setText("poziom istotności α");

        textFieldSignificance.setText("0.05");
        textFieldSignificance.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldSignificanceFocusLost(evt);
            }
        });
        textFieldSignificance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldSignificanceActionPerformed(evt);
            }
        });

        labelTick.setEnabled(false);

        checkBoxTwoSidedTest.setText("test dwustronny");
        checkBoxTwoSidedTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxTwoSidedTestActionPerformed(evt);
            }
        });

        checkBoxBootstrap.setText("próbkowanie bootstrap");
        checkBoxBootstrap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxBootstrapActionPerformed(evt);
            }
        });

        labelBootstrap.setText("ilość prób");

        textFieldBootstrap.setText("20000");
        textFieldBootstrap.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldBootstrapFocusLost(evt);
            }
        });
        textFieldBootstrap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldBootstrapActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkBoxBootstrap)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(labelBootstrap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(textFieldBootstrap, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(checkBoxSignificance)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addComponent(panelCorrWindow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(checkBoxRunCorr))
                                .addGap(0, 186, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkBoxTwoSidedTest)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(labelSignificance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(textFieldSignificance))
                                .addGap(18, 18, 18)
                                .addComponent(labelTick, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jSeparator2)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(checkBoxSignificance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelSignificance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelTick, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textFieldSignificance))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkBoxTwoSidedTest)
                .addGap(10, 10, 10)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkBoxRunCorr)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelCorrWindow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkBoxBootstrap)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelBootstrap)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textFieldBootstrap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        tabbedPanePreferences.addTab("Korelacja", jPanel1);

        checkBoxLogging.setText("logowanie");
        checkBoxLogging.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxLoggingActionPerformed(evt);
            }
        });

        labelLoggingCheckboxHelper.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelLoggingCheckboxHelper.setText("?"); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(checkBoxLogging)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 331, Short.MAX_VALUE)
                .addComponent(labelLoggingCheckboxHelper)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxLogging)
                    .addComponent(labelLoggingCheckboxHelper))
                .addContainerGap(287, Short.MAX_VALUE))
        );

        tabbedPanePreferences.addTab("Debugging", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPanePreferences)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPanePreferences)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkBoxRunCorrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxRunCorrActionPerformed
        Component[] components = panelCorrWindow.getComponents();
        for (Component component : components) {
            component.setEnabled(checkBoxRunCorr.isSelected());
        }
        UserPreferences.getInstance().getPrefs().putBoolean("checkBoxRunCorrSelected", checkBoxRunCorr.isSelected());
    }//GEN-LAST:event_checkBoxRunCorrActionPerformed

    private void sliderCorrWindowStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderCorrWindowStateChanged
        labelCorrWindowVal.setText(String.valueOf(getSliderCorrVal()));
        UserPreferences.getInstance().getPrefs().putInt("sliderCorrWindowVal", sliderCorrWindow.getValue());
    }//GEN-LAST:event_sliderCorrWindowStateChanged

    private void checkBoxLoggingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxLoggingActionPerformed
        UserPreferences.getInstance().getPrefs().putBoolean("checkBoxLoggingSelected", checkBoxRunCorr.isSelected());
    }//GEN-LAST:event_checkBoxLoggingActionPerformed

    private void checkBoxSignificanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxSignificanceActionPerformed
        checkBoxTwoSidedTest.setEnabled(checkBoxSignificance.isSelected());
        textFieldSignificance.setEnabled(checkBoxSignificance.isSelected());
        UserPreferences.getInstance().getPrefs().putBoolean("checkBoxSignificance", checkBoxSignificance.isSelected());
    }//GEN-LAST:event_checkBoxSignificanceActionPerformed

    private void textFieldSignificanceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldSignificanceFocusLost
        String newVal = textFieldSignificance.getText();
        newVal = newVal.replace(',', '.');
        Exception ex = null;
        try {
            Double.parseDouble(newVal);
            UserPreferences.getInstance().getPrefs().put("textFieldSignificance", newVal);
        } catch (NullPointerException | NumberFormatException e) {
            ex = e;
            // TODO: zapisywać wyjątki do loga
        }
        textFieldSignificance.setText(UserPreferences.getInstance().getPrefs().get("textFieldSignificance", "0.05"));
        // TODO: zrobić tick.png żeby było widać zatwierdzenie wpisanej wartości
    }//GEN-LAST:event_textFieldSignificanceFocusLost

    private void textFieldSignificanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldSignificanceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldSignificanceActionPerformed

    private void checkBoxTwoSidedTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxTwoSidedTestActionPerformed
        UserPreferences.getInstance().getPrefs().putBoolean("checkBoxTwoSidedTest", checkBoxTwoSidedTest.isSelected());
    }//GEN-LAST:event_checkBoxTwoSidedTestActionPerformed

    private void checkBoxBootstrapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxBootstrapActionPerformed
        UserPreferences.getInstance().getPrefs().putBoolean("checkBoxBootstrap", checkBoxBootstrap.isSelected());
    }//GEN-LAST:event_checkBoxBootstrapActionPerformed

    private void textFieldBootstrapFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldBootstrapFocusLost
        String newVal = textFieldBootstrap.getText();
        newVal = newVal.replace(',', '.');
        Exception ex = null;
        try {
            Integer.parseInt(newVal);
            if (Integer.parseInt(newVal) <= 0) {
                throw new NumberFormatException();
            }
            UserPreferences.getInstance().getPrefs().put("textFieldBootstrap", newVal);
        } catch (NullPointerException | NumberFormatException e) {
            ex = e;
            // TODO: zapisywać wyjątki do loga
        }
        textFieldBootstrap.setText(UserPreferences.getInstance().getPrefs().get("textFieldBootstrap", "20000"));
        // TODO: zrobić tick.png żeby było widać zatwierdzenie wpisanej wartości
    }//GEN-LAST:event_textFieldBootstrapFocusLost

    private void textFieldBootstrapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldBootstrapActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldBootstrapActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkBoxBootstrap;
    private javax.swing.JCheckBox checkBoxLogging;
    private javax.swing.JCheckBox checkBoxRunCorr;
    private javax.swing.JCheckBox checkBoxSignificance;
    private javax.swing.JCheckBox checkBoxTwoSidedTest;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labelBootstrap;
    private javax.swing.JLabel labelCorrWindow;
    private javax.swing.JLabel labelCorrWindowVal;
    private javax.swing.JLabel labelLoggingCheckboxHelper;
    private javax.swing.JLabel labelSignificance;
    private javax.swing.JLabel labelTick;
    private javax.swing.JPanel panelCorrWindow;
    private javax.swing.JSlider sliderCorrWindow;
    private javax.swing.JTabbedPane tabbedPanePreferences;
    private javax.swing.JTextField textFieldBootstrap;
    private javax.swing.JTextField textFieldSignificance;
    // End of variables declaration//GEN-END:variables

    /**
     *
     * @return value of correlation window
     */
    public int getSliderCorrVal() {
        return 1 + 2 * sliderCorrWindow.getValue();
    }

    private void initCompsDefaultVals() {
        SwingUtilities.invokeLater(() -> {
            try {
                labelTick.setIcon(new ImageIcon(ImageIO.read(getClass().getClassLoader().getResource("resources/tick.png"))));
                labelTick.setVisible(false);
                
                final List<Image> icons1 = new ArrayList<>();
                icons1.add(ImageIO.read(getClass().getClassLoader().getResource("resources/32.png")));
                icons1.add(ImageIO.read(getClass().getClassLoader().getResource("resources/48.png")));
                icons1.add(ImageIO.read(getClass().getClassLoader().getResource("resources/64.png")));
                icons1.add(ImageIO.read(getClass().getClassLoader().getResource("resources/96.png")));
                icons1.add(ImageIO.read(getClass().getClassLoader().getResource("resources/128.png")));
                icons1.add(ImageIO.read(getClass().getClassLoader().getResource("resources/450.png")));
                setIconImages(icons1);
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        
        labelCorrWindowVal.setText(String.valueOf(getSliderCorrVal()));
        labelLoggingCheckboxHelper.setToolTipText(ResourceBundle.getBundle(MainWindow.BUNDLE).getString("wlaczenie logowania spowalnia obliczenia"));
    }

    private void initCompsFromPrefs() {
        checkBoxLogging.setSelected(UserPreferences.getInstance().getPrefs().getBoolean("checkBoxLoggingSelected", false));
        checkBoxRunCorr.setSelected(UserPreferences.getInstance().getPrefs().getBoolean("checkBoxRunCorrSelected", false));
        sliderCorrWindow.setValue(UserPreferences.getInstance().getPrefs().getInt("sliderCorrWindowVal", 15));
        checkBoxSignificance.setSelected(UserPreferences.getInstance().getPrefs().getBoolean("checkBoxSignificance", true));
        textFieldSignificance.setText(UserPreferences.getInstance().getPrefs().get("textFieldSignificance", "0.05"));
        textFieldBootstrap.setText(UserPreferences.getInstance().getPrefs().get("textFieldBootstrap", "20000"));
        checkBoxTwoSidedTest.setSelected(UserPreferences.getInstance().getPrefs().getBoolean("checkBoxTwoSidedTest", true));
        checkBoxBootstrap.setSelected(UserPreferences.getInstance().getPrefs().getBoolean("checkBoxBootstrap", true));
    }

    private void initCompsLast() {
        Component[] components = panelCorrWindow.getComponents();
        for (Component component : components) {
            component.setEnabled(checkBoxRunCorr.isSelected());
        }
        textFieldSignificance.setEnabled(checkBoxSignificance.isSelected());
        checkBoxTwoSidedTest.setEnabled(checkBoxSignificance.isSelected());
    }

    public JCheckBox getCheckBoxRunCorr() {
        return checkBoxRunCorr;
    }
    
    public JCheckBox getCheckBoxSignificance(){
        return checkBoxSignificance;
    }
    
    public JCheckBox getCheckBoxBootstrap(){
        return checkBoxBootstrap;
    }
    
    public JCheckBox getCheckBoxLogging(){
        return checkBoxLogging;
    }
    
    public JCheckBox getCheckBoxTwoSidedTest(){
        return checkBoxTwoSidedTest;
    }
    
    public JTextField getSignificanceTextField(){
        return textFieldSignificance;
    }
    
    public JTextField getBootstrapTextField(){
        return textFieldBootstrap;
    }

    enum TabsOrder {

        CORRELATION(0),
        DEBUGGING(1);
        int index;

        private TabsOrder(int index) {
            this.index = index;
        }

    }

    @Override
    public void onLocaleChange(Locale oldLocale) {
        tabbedPanePreferences.setTitleAt(TabsOrder.CORRELATION.index, ResourceBundle.getBundle(MainWindow.BUNDLE).getString("Korelacja"));
        checkBoxRunCorr.setText(ResourceBundle.getBundle(MainWindow.BUNDLE).getString("Korelacja kroczaca").toLowerCase());
        labelCorrWindow.setText(ResourceBundle.getBundle(MainWindow.BUNDLE).getString("Rozmiar okna korelacji").toLowerCase());
        checkBoxLogging.setText(ResourceBundle.getBundle(MainWindow.BUNDLE).getString("Logowanie").toLowerCase());
        labelLoggingCheckboxHelper.setToolTipText(ResourceBundle.getBundle(MainWindow.BUNDLE).getString("wlaczenie logowania spowalnia obliczenia"));
        checkBoxSignificance.setText(ResourceBundle.getBundle(MainWindow.BUNDLE).getString("obliczanie istotności"));
        labelSignificance.setText(ResourceBundle.getBundle(MainWindow.BUNDLE).getString("poziom istotności"));
        checkBoxTwoSidedTest.setText(ResourceBundle.getBundle(MainWindow.BUNDLE).getString("test dwustronny"));
    }
}
